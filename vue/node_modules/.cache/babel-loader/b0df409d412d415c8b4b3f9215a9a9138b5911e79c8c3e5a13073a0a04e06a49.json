{"ast":null,"code":"import global from './GlobalPage.vue';\n//import AMapLoader from '@amap/amap-jsapi-loader';\nimport dayjs from 'dayjs';\nimport axios from \"axios\";\n//import global from './GlobalPage.vue'\nconst rest = global.ip;\nexport default {\n  name: 'dashBoard.vue',\n  data() {\n    return {\n      smoking: '',\n      down: '',\n      call: '',\n      map: null,\n      //初始化 map 对象，\n      startDate: new Date(),\n      // 初始化为当前日期\n      endDate: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      // 一天前的日期\n      weekAgoDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      // 一周前的日期\n      monthAgoDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n      // 一个月前的日期\n      yearAgoDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000),\n      // 一年前的日期\n\n      value: '',\n      xDayValue: [],\n      yDayValue: [],\n      xWeekValue: [],\n      yWeekDayValue: [],\n      xMonthValue: [],\n      yMonthValue: [],\n      xYearValue: [],\n      yYearValue: []\n    };\n  },\n  methods: {\n    fetchData() {\n      this.drawLine(\"myChart\", \"bar\");\n      this.drawLineWeek(\"myChart2\", \"bar\");\n      this.drawLineMonth(\"myChart3\", \"bar\");\n      this.drawLineYear(\"myChart4\", \"bar\");\n    },\n    // fetchData: async function() {\n    //   try {\n    //     const response = await axios.get(rest + 'count', {\n    //       params: {\n    //         // eTime: startDate,\n    //         // sTime: endDate\n    //       }\n    //     });\n    //     this.xDayValue = response.data.data.type;\n    //     this.yDayValue = response.data.data.cnt;\n    //     console.log(response.data.data);\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    // },\n\n    drawLine(chartID, type) {\n      console.log(\"绘制一日图\");\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById(chartID));\n      myChart.setOption({\n        title: {\n          text: '近一日内统计信息'\n        },\n        tooltip: {},\n        xAxis: {\n          data: this.xDayValue,\n          axisLabel: {\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\n          }\n        },\n\n        yAxis: {},\n        series: [{\n          name: '数量',\n          type: type,\n          data: this.yDayValue,\n          itemStyle: {\n            color: '#81bcd9' // 每个柱子的颜色分别为红、绿、蓝、黄、紫\n          }\n        }],\n\n        label: {\n          show: true,\n          position: 'top',\n          formatter: '{c}' // 显示具体的数值\n        }\n      });\n    },\n\n    drawLineWeek(chartID, type) {\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById(chartID));\n      myChart.setOption({\n        title: {\n          text: '近一周统计信息'\n        },\n        tooltip: {},\n        xAxis: {\n          data: this.xWeekValue,\n          axisLabel: {\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\n          }\n        },\n\n        yAxis: {},\n        series: [{\n          name: '数量',\n          type: type,\n          data: this.yWeekValue,\n          itemStyle: {\n            color: '#81bcd9' // 每个柱子的颜色分别为红、绿、蓝、黄、紫\n          }\n        }],\n\n        label: {\n          show: true,\n          position: 'top',\n          formatter: '{c}' // 显示具体的数值\n        }\n      });\n    },\n\n    drawLineMonth(chartID, type) {\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById(chartID));\n      myChart.setOption({\n        title: {\n          text: '近一月统计信息'\n        },\n        tooltip: {},\n        xAxis: {\n          data: this.xMonthValue,\n          axisLabel: {\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\n          }\n        },\n\n        yAxis: {},\n        series: [{\n          name: '数量',\n          type: type,\n          data: this.yMonthValue,\n          itemStyle: {\n            color: '#81bcd9' // 每个柱子的颜色分别为红、绿、蓝、黄、紫\n          }\n        }],\n\n        label: {\n          show: true,\n          position: 'top',\n          formatter: '{c}' // 显示具体的数值\n        }\n      });\n    },\n\n    drawLineYear(chartID, type) {\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById(chartID));\n      myChart.setOption({\n        title: {\n          text: '近一年统计信息'\n        },\n        tooltip: {},\n        xAxis: {\n          data: this.xYearValue,\n          axisLabel: {\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\n          }\n        },\n\n        yAxis: {},\n        series: [{\n          name: '数量',\n          type: type,\n          data: this.yYearValue,\n          itemStyle: {\n            color: '#81bcd9' // 每个柱子的颜色分别为红、绿、蓝、黄、紫\n          }\n        }],\n\n        label: {\n          show: true,\n          position: 'top',\n          formatter: '{c}' // 显示具体的数值\n        }\n      });\n    }\n  },\n\n  // mounted() {\n  //   // this.drawLine(\"myChart\",\"bar\");\n  //   // this.drawLineWeek(\"myChart2\",\"bar\");\n  //   // this.drawLineMonth(\"myChart3\",\"bar\");\n  //   // this.drawLineYear(\"myChart4\",\"bar\");\n  //  // this.initMap();\n  //\n  // },\n\n  created() {\n    const startDate = dayjs(this.startDate).format('YYYY-MM-DDTHH:mm:ss');\n    const endDate = dayjs(new Date(Date.now() - 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\n    const weekDate = dayjs(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\n    const monthDate = dayjs(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\n    const yearDate = dayjs(new Date(Date.now() - 365 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(rest + 'count', {\n          params: {\n            eTime: startDate,\n            sTime: endDate\n          }\n        });\n        this.xDayValue = response.data.data.type;\n        this.yDayValue = response.data.data.cnt;\n        const indexcall = response.data.data.type.indexOf(\"calling\");\n        if (indexcall !== -1) {\n          this.call = response.data.data.cnt[indexcall];\n        }\n        const indexdown = response.data.data.type.indexOf(\"down\");\n        if (indexdown !== -1) {\n          this.down = response.data.data.cnt[indexdown];\n        }\n        const indexsmoking = response.data.data.type.indexOf(\"smoking\");\n        if (indexdown !== -1) {\n          this.smoking = response.data.data.cnt[indexsmoking];\n        }\n        console.log(response.data.data);\n        this.drawLine(\"myChart\", \"bar\");\n\n        // 在数据赋值完成后再调用函数\n        this.fetchData();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n    const fetchDataWeek = async () => {\n      try {\n        const response = await axios.get(rest + 'count', {\n          params: {\n            eTime: startDate,\n            sTime: weekDate\n          }\n        });\n        this.xWeekValue = response.data.data.type;\n        this.yWeekValue = response.data.data.cnt;\n        console.log(response.data.data);\n        this.drawLineWeek(\"myChart2\", \"bar\");\n\n        // 在数据赋值完成后再调用函数\n        this.fetchData();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDataWeek();\n    const fetchDataMonth = async () => {\n      try {\n        const response = await axios.get(rest + 'count', {\n          params: {\n            eTime: startDate,\n            sTime: monthDate\n          }\n        });\n        this.xMonthValue = response.data.data.type;\n        this.yMonthValue = response.data.data.cnt;\n        console.log(response.data.data);\n        this.drawLineMonth(\"myChart3\", \"bar\");\n        //this.drawLineYear(\"myChart4\",\"bar\");\n\n        // 在数据赋值完成后再调用函数\n        this.fetchData();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDataMonth();\n    const fetchDataYear = async () => {\n      try {\n        const response = await axios.get(rest + 'count', {\n          params: {\n            eTime: startDate,\n            sTime: yearDate\n          }\n        });\n        this.xYearValue = response.data.data.type;\n        this.yYearValue = response.data.data.cnt;\n        console.log(response.data.data);\n\n        //this.drawLineMonth(\"myChart3\",\"bar\");\n        this.drawLineYear(\"myChart4\", \"bar\");\n\n        // 在数据赋值完成后再调用函数\n        this.fetchData();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDataYear();\n  },\n  mounted() {}\n};","map":{"version":3,"names":["global","dayjs","axios","rest","ip","name","data","smoking","down","call","map","startDate","Date","endDate","now","weekAgoDate","monthAgoDate","yearAgoDate","value","xDayValue","yDayValue","xWeekValue","yWeekDayValue","xMonthValue","yMonthValue","xYearValue","yYearValue","methods","fetchData","drawLine","drawLineWeek","drawLineMonth","drawLineYear","chartID","type","console","log","myChart","$echarts","init","document","getElementById","setOption","title","text","tooltip","xAxis","axisLabel","interval","yAxis","series","itemStyle","color","label","show","position","formatter","yWeekValue","created","format","weekDate","monthDate","yearDate","response","get","params","eTime","sTime","cnt","indexcall","indexOf","indexdown","indexsmoking","error","fetchDataWeek","fetchDataMonth","fetchDataYear","mounted"],"sources":["src/components/dashBoard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-editor-container\">\r\n\r\n    <el-row :gutter=\"32\">\r\n      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">\r\n        <div class=\"chart-wrapper\">\r\n          <el-row>\r\n            <el-col :span=\"16\"><div class=\"grid-content bg-purple\">\r\n              <img src=\"../img/smoking.png\">\r\n            </div></el-col>\r\n            <el-col :span=\"8\"><div class=\"grid-content bg-purple-light\">\r\n              <span>今日共监测到抽烟</span>\r\n              <span style=\"font-size: 50px;color: #724d54;\"><br>{{smoking}}</span>\r\n              <span>次</span>\r\n            </div></el-col>\r\n          </el-row>\r\n<!--          <raddar-chart />-->\r\n<!--          <h1>22</h1>-->\r\n        </div>\r\n      </el-col>\r\n\r\n\r\n      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">\r\n        <div class=\"chart-wrapper\">\r\n          <el-row>\r\n          <el-col :span=\"16\"><div class=\"grid-content bg-purple\">\r\n            <img src=\"../img/calling.png\">\r\n          </div></el-col>\r\n          <el-col :span=\"8\"><div class=\"grid-content bg-purple-light\">\r\n            <span>今日监测到打电话</span>\r\n            <span style=\"font-size: 50px;color: #486573;\"><br>{{call}}</span>\r\n            <span>次</span>\r\n          </div></el-col>\r\n          </el-row>\r\n        </div>\r\n      </el-col>\r\n\r\n\r\n      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">\r\n        <div class=\"chart-wrapper\">\r\n         <el-row>\r\n          <el-col :span=\"16\"><div class=\"grid-content bg-purple\">\r\n            <img src=\"../img/down.png\">\r\n          </div></el-col>\r\n          <el-col :span=\"8\"><div class=\"grid-content bg-purple-light\">\r\n            <span>今日共监测到摔倒</span>\r\n            <span style=\"font-size: 50px;color: #486573;\"><br>{{down}}</span>\r\n            <span>次</span>\r\n          </div></el-col>\r\n         </el-row>\r\n        </div>\r\n      </el-col>\r\n\r\n    </el-row>\r\n\r\n\r\n\r\n\r\n<el-card>\r\n        <el-row>\r\n\r\n          <el-col :span=\"12\">\r\n            <div class=\"grid-content bg-purple\">\r\n              <div id=\"myChart\" :style=\"{width: '600px', height: '500px'}\"></div>\r\n            </div>\r\n          </el-col>\r\n\r\n\r\n          <el-col :span=\"12\"><div class=\"grid-content bg-purple-light\"> <div id=\"myChart2\" :style=\"{width: '600px', height: '500px'}\"></div></div></el-col>\r\n\r\n        </el-row>\r\n\r\n        <el-row>\r\n        <el-col :span=\"12\">\r\n          <div class=\"grid-content bg-purple\"><div id=\"myChart3\" :style=\"{width: '600px', height: '500px'}\"></div></div></el-col>\r\n\r\n\r\n        <el-col :span=\"12\"><div class=\"grid-content bg-purple-light\"> <div id=\"myChart4\" :style=\"{width: '600px', height: '500px'}\"></div></div></el-col>\r\n\r\n        </el-row>\r\n</el-card>\r\n\r\n\r\n\r\n    <el-row :gutter=\"8\">\r\n      <el-col :xs=\"{span: 24}\" :sm=\"{span: 24}\" :md=\"{span: 24}\" :lg=\"{span: 12}\" :xl=\"{span: 12}\" style=\"padding-right:8px;margin-bottom:30px;\">\r\n\r\n      </el-col>\r\n      <el-col :xs=\"{span: 24}\" :sm=\"{span: 12}\" :md=\"{span: 12}\" :lg=\"{span: 6}\" :xl=\"{span: 6}\" style=\"margin-bottom:30px;\">\r\n\r\n      </el-col>\r\n      <el-col :xs=\"{span: 24}\" :sm=\"{span: 12}\" :md=\"{span: 12}\" :lg=\"{span: 6}\" :xl=\"{span: 6}\" style=\"margin-bottom:30px;\">\r\n\r\n      </el-col>\r\n    </el-row>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport global from './GlobalPage.vue'\r\n//import AMapLoader from '@amap/amap-jsapi-loader';\r\nimport dayjs from 'dayjs';\r\nimport axios from \"axios\";\r\n//import global from './GlobalPage.vue'\r\nconst rest = global.ip;\r\n\r\n\r\nexport default {\r\n  name: 'dashBoard.vue',\r\n\r\n  data() {\r\n    return {\r\n\r\n      smoking:'',\r\n      down:'',\r\n      call:'',\r\n      map: null, //初始化 map 对象，\r\n      startDate: new Date(), // 初始化为当前日期\r\n      endDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // 一天前的日期\r\n      weekAgoDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 一周前的日期\r\n      monthAgoDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 一个月前的日期\r\n      yearAgoDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000), // 一年前的日期\r\n\r\n      value:'',\r\n      xDayValue:[],\r\n      yDayValue:[],\r\n      xWeekValue:[],\r\n      yWeekDayValue:[],\r\n      xMonthValue:[],\r\n      yMonthValue:[],\r\n      xYearValue:[],\r\n      yYearValue:[],\r\n\r\n    }\r\n  },\r\n\r\n\r\n\r\n\r\n  methods: {\r\n\r\n    fetchData(){\r\n         this.drawLine(\"myChart\",\"bar\");\r\n         this.drawLineWeek(\"myChart2\",\"bar\");\r\n         this.drawLineMonth(\"myChart3\",\"bar\");\r\n         this.drawLineYear(\"myChart4\",\"bar\");\r\n    },\r\n\r\n    // fetchData: async function() {\r\n    //   try {\r\n    //     const response = await axios.get(rest + 'count', {\r\n    //       params: {\r\n    //         // eTime: startDate,\r\n    //         // sTime: endDate\r\n    //       }\r\n    //     });\r\n    //     this.xDayValue = response.data.data.type;\r\n    //     this.yDayValue = response.data.data.cnt;\r\n    //     console.log(response.data.data);\r\n    //   } catch (error) {\r\n    //     console.log(error);\r\n    //   }\r\n    // },\r\n\r\n    drawLine(chartID,type){\r\n      console.log(\"绘制一日图\");\r\n      // 基于准备好的dom，初始化echarts实例\r\n      let myChart = this.$echarts.init(document.getElementById(chartID));\r\n\r\n      myChart.setOption({\r\n        title: { text: '近一日内统计信息' },\r\n        tooltip: {},\r\n        xAxis: {\r\n          data: this.xDayValue,\r\n          axisLabel: {\r\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\r\n          }\r\n        },\r\n        yAxis: {},\r\n        series: [{\r\n          name: '数量',\r\n          type: type,\r\n          data: this.yDayValue,\r\n          itemStyle: {\r\n            color: '#81bcd9'// 每个柱子的颜色分别为红、绿、蓝、黄、紫\r\n          }\r\n        }],\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          formatter: '{c}' // 显示具体的数值\r\n        }\r\n      });\r\n    },\r\n    drawLineWeek(chartID,type){\r\n      // 基于准备好的dom，初始化echarts实例\r\n      let myChart = this.$echarts.init(document.getElementById(chartID));\r\n\r\n      myChart.setOption({\r\n        title: { text: '近一周统计信息' },\r\n        tooltip: {},\r\n        xAxis: {\r\n          data: this.xWeekValue,\r\n          axisLabel: {\r\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\r\n          }\r\n        },\r\n        yAxis: {},\r\n        series: [{\r\n          name: '数量',\r\n          type: type,\r\n          data: this.yWeekValue,\r\n          itemStyle: {\r\n            color: '#81bcd9'// 每个柱子的颜色分别为红、绿、蓝、黄、紫\r\n          }\r\n        }],\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          formatter: '{c}' // 显示具体的数值\r\n        }\r\n      });\r\n    },\r\n    drawLineMonth(chartID,type){\r\n      // 基于准备好的dom，初始化echarts实例\r\n      let myChart = this.$echarts.init(document.getElementById(chartID));\r\n\r\n      myChart.setOption({\r\n        title: { text: '近一月统计信息' },\r\n        tooltip: {},\r\n        xAxis: {\r\n          data: this.xMonthValue,\r\n          axisLabel: {\r\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\r\n          }\r\n        },\r\n        yAxis: {},\r\n        series: [{\r\n          name: '数量',\r\n          type: type,\r\n          data: this.yMonthValue,\r\n          itemStyle: {\r\n            color: '#81bcd9'// 每个柱子的颜色分别为红、绿、蓝、黄、紫\r\n          }\r\n        }],\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          formatter: '{c}' // 显示具体的数值\r\n        }\r\n      });\r\n    },\r\n    drawLineYear(chartID,type){\r\n      // 基于准备好的dom，初始化echarts实例\r\n      let myChart = this.$echarts.init(document.getElementById(chartID));\r\n\r\n      myChart.setOption({\r\n        title: { text: '近一年统计信息' },\r\n        tooltip: {},\r\n        xAxis: {\r\n          data: this.xYearValue,\r\n          axisLabel: {\r\n            interval: 0 // 设置横坐标显示的间隔，这里设置为2表示每隔两个数据显示一个\r\n          }\r\n        },\r\n        yAxis: {},\r\n        series: [{\r\n          name: '数量',\r\n          type: type,\r\n          data: this.yYearValue,\r\n          itemStyle: {\r\n            color: '#81bcd9'// 每个柱子的颜色分别为红、绿、蓝、黄、紫\r\n          }\r\n        }],\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          formatter: '{c}' // 显示具体的数值\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // mounted() {\r\n  //   // this.drawLine(\"myChart\",\"bar\");\r\n  //   // this.drawLineWeek(\"myChart2\",\"bar\");\r\n  //   // this.drawLineMonth(\"myChart3\",\"bar\");\r\n  //   // this.drawLineYear(\"myChart4\",\"bar\");\r\n  //  // this.initMap();\r\n  //\r\n  // },\r\n\r\n  created() {\r\n\r\n    const startDate = dayjs(this.startDate).format('YYYY-MM-DDTHH:mm:ss');\r\n    const endDate = dayjs(new Date(Date.now() - 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\r\n    const weekDate = dayjs(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\r\n    const monthDate = dayjs(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\r\n    const yearDate = dayjs(new Date(Date.now() - 365 * 24 * 60 * 60 * 1000)).format('YYYY-MM-DDTHH:mm:ss');\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n          const response = await axios.get(rest + 'count', {\r\n            params: {\r\n              eTime: startDate,\r\n              sTime: endDate\r\n            }\r\n          });\r\n          this.xDayValue = response.data.data.type;\r\n          this.yDayValue = response.data.data.cnt;\r\n\r\n          const indexcall = response.data.data.type.indexOf(\"calling\");\r\n          if (indexcall!==-1){\r\n            this.call = response.data.data.cnt[indexcall];\r\n          }\r\n          const indexdown = response.data.data.type.indexOf(\"down\");\r\n          if (indexdown!==-1){\r\n            this.down = response.data.data.cnt[indexdown];\r\n          }\r\n          const indexsmoking = response.data.data.type.indexOf(\"smoking\");\r\n          if (indexdown!==-1){\r\n            this.smoking = response.data.data.cnt[indexsmoking];\r\n          }\r\n\r\n\r\n\r\n\r\n          console.log(response.data.data);\r\n\r\n          this.drawLine(\"myChart\",\"bar\");\r\n\r\n          // 在数据赋值完成后再调用函数\r\n          this.fetchData();\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n\r\n    const fetchDataWeek = async () => {\r\n      try {\r\n        const response = await axios.get(rest + 'count', {\r\n          params: {\r\n            eTime: startDate,\r\n            sTime: weekDate\r\n          }\r\n        });\r\n        this.xWeekValue = response.data.data.type;\r\n        this.yWeekValue = response.data.data.cnt;\r\n        console.log(response.data.data);\r\n\r\n        this.drawLineWeek(\"myChart2\",\"bar\");\r\n\r\n\r\n        // 在数据赋值完成后再调用函数\r\n        this.fetchData();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchDataWeek();\r\n\r\n\r\n    const fetchDataMonth = async () => {\r\n      try {\r\n        const response = await axios.get(rest + 'count', {\r\n          params: {\r\n            eTime: startDate,\r\n            sTime: monthDate\r\n          }\r\n        });\r\n        this.xMonthValue = response.data.data.type;\r\n        this.yMonthValue = response.data.data.cnt;\r\n        console.log(response.data.data);\r\n\r\n        this.drawLineMonth(\"myChart3\",\"bar\");\r\n        //this.drawLineYear(\"myChart4\",\"bar\");\r\n\r\n\r\n        // 在数据赋值完成后再调用函数\r\n        this.fetchData();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchDataMonth();\r\n\r\n\r\n    const fetchDataYear = async () => {\r\n      try {\r\n        const response = await axios.get(rest + 'count', {\r\n          params: {\r\n            eTime: startDate,\r\n            sTime: yearDate\r\n          }\r\n        });\r\n        this.xYearValue = response.data.data.type;\r\n        this.yYearValue = response.data.data.cnt;\r\n        console.log(response.data.data);\r\n\r\n        //this.drawLineMonth(\"myChart3\",\"bar\");\r\n        this.drawLineYear(\"myChart4\",\"bar\");\r\n\r\n\r\n        // 在数据赋值完成后再调用函数\r\n        this.fetchData();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchDataYear();\r\n\r\n  },\r\n  mounted() {\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-editor-container {\r\n  padding: 32px;\r\n  background-color: rgb(240, 242, 245);\r\n  position: relative;\r\n\r\n  .github-corner {\r\n    position: absolute;\r\n    top: 0px;\r\n    border: 0;\r\n    right: 0;\r\n  }\r\n\r\n  .chart-wrapper {\r\n    background: #fff;\r\n    padding: 16px 16px 0;\r\n    margin-bottom: 32px;\r\n  }\r\n}\r\n\r\n@media (max-width:1024px) {\r\n  .chart-wrapper {\r\n    padding: 8px;\r\n  }\r\n}\r\n\r\n#container {\r\n  width: 80%;\r\n  height: 400px;\r\n  margin: 100px auto;\r\n  border: 2px solid red;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}